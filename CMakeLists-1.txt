cmake_minimum_required(VERSION 3.17)
# 设置宏定义开关 USE_ONNXRuntime
# define options in outside level's CMakelists.txt
option(USE_ONNXRuntime    "Set to switch to build use ONNXRuntime"  OFF)
option(USE_CUDA    "Set to switch to build use CUDA" ON)

project(algo_inspect)

message(STATUS "before USE_ONNXRuntime=${USE_ONNXRuntime}, USE_CUDA=${USE_CUDA}")
message(STATUS "!!!!  _WIN32=${_WIN32}  !!!! ")
set(OpenCV_DIR "D:\\daima\\ktz1\\configurations\\opt\\rosdeps\\x64\\CMake")
#set(OpenCV_DIR "D:\\opencv4.5.5\\opencv\\build")
set(yaml-cpp_DIR "D:\\daima\\ktz1\\configurations\\opt\\rosdeps\\x64\\CMake")

#find_package(yaml-cpp REQUIRED)
message(STATUS "yaml include dir: "${YAML_INCLUDE_DIR})
#message(STATUS "yaml library dir: "${YAML_LIBRARY_DIR})

#find_package(OpenCV REQUIRED)

set(Boost_INCLUDE_DIR "D:\\daima\\ktz1\\configurations\\opt\\rosdeps\\x64\\include\\boost-1_66")
set(Boost_LIBRARY_DIR "D:\\daima\\ktz1\\configurations\\opt\\rosdeps\\x64\\lib")
#find_package(Boost REQUIRED COMPONENTS filesystem date_time )
include_directories(${Boost_INCLUDE_DIR})
link_directories(${Boost_LIBRARY_DIR} "D:\\daima\\ktz1\\configurations\\opt\\rosdeps\\x64\\lib")

message(STATUS "opencv include dir: ${OpenCV_INCLUDE_DIRS}")
set(OpenCV_INCLUDE_DIRS "D:\\File\\opencv4lib\\opencv\\build\\include")
set(OpenCV_LIBS "D:\\File\\opencv4lib\\opencv\\build\\x64\\vc15\\lib\\opencv_world455.lib")
include_directories(
  ${OpenCV_INCLUDE_DIRS}
  ${YAML_INCLUDE_DIR}
  )
SET(ONNXRT_DIR ${PROJECT_SOURCE_DIR}/onnxruntime) 
SET(ONNXRT_INC_DIR "C:\\shiyanshiproject\\onnx_config\\onnxruntime\\include")
SET(ONNXRT_LIB_DIR "C:\\shiyanshiproject\\onnx_config\\onnxruntime\\lib")
INCLUDE_DIRECTORIES(${ONNXRT_INC_DIR})
LINK_DIRECTORIES(${ONNXRT_LIB_DIR})

#SET(GFLAGES_INC_DIR "D:\\OCR\\inspect-pouch-master\\gflags\\include")
#SET(GFLAGES_LIB_DIR "D:\\OCR\\inspect-pouch-master\\gflags\\lib")
#INCLUDE_DIRECTORIES(${GFLAGES_INC_DIR})
#LINK_DIRECTORIES(${GFLAGES_LIB_DIR})

if (USE_ONNXRuntime)
	ADD_DEFINITIONS(-DUSE_ONNXRuntime)
	message(STATUS "Use ONNXRuntime (CPU) !!!")
elseif (USE_CUDA)
	ADD_DEFINITIONS(-DUSE_ONNXRuntime)
	ADD_DEFINITIONS(-DLPR_EDITOR_USE_CUDA)
	message(STATUS "Use ONNXRuntime (CUDA) !!! define LPR_EDITOR_USE_CUDA")
endif()

message(STATUS "after USE_ONNXRuntime=${USE_ONNXRuntime}, USE_CUDA=${USE_CUDA}")


if	(USE_ONNXRuntime OR  USE_CUDA)
  message("USE_ONNXRuntime OR  USE_CUDA")
SET(SOURCES
  Open_LPReditor_Lib.cc
  InspectProcessor.cc
  image.cc
  strobj.cc
  objectwrapper.cc
  objectcontainer.cc
  inspect_util.cc
  defect_data.cc
  ColorPredictor.cc
  Levenshtein.cc
  h9Log.cc
  h9Timer.cc
  Line.cc
  ONNX_detector.cc
  utils_anpr_detect.cc
  utils_image_file.cc
  yolov5_anpr_onnx_detector.cc 
  getopt.cc
  str_util.cpp

)

else()
message("DO NOT USE_ONNXRuntime OR  USE_CUDA")
SET(SOURCES
  InspectProcessor.cc
  image.cc
  strobj.cc
  h9Log.cc
  h9Timer.cc
  objectwrapper.cc
  objectcontainer.cc
  inspect_util.cc
  defect_data.cc
  ColorPredictor.cc
  Levenshtein.cc
  getopt.cc
  str_util.cpp
)
endif()  

set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
ADD_LIBRARY(inspect_algo SHARED ${SOURCES})
include(GenerateExportHeader)
generate_export_header(inspect_algo)
target_include_directories(inspect_algo PUBLIC ${ONNXRT_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(inspect_algo
 #${OpenCV_LIBRARIES}
 ${OpenCV_LIBS}
 ${Boost_LIBRARIES}
 onnxruntime
 ${YAML_CPP_LIBRARIES}
)
 
#SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
#LINK_DIRECTORIES(inspect_app ${PROJECT_BINARY_DIR}/lib)
add_executable (inspect_app inspect_app.cc inspect_util.cc)

TARGET_LINK_LIBRARIES(inspect_app inspect_algo
 #${OpenCV_LIBRARIES}
 ${OpenCV_LIBS}
 ${Boost_LIBRARIES}
 onnxruntime
 ${YAML_CPP_LIBRARIES}
 )
